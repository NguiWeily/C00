Chapter IX
Exercise 06: ft_print_comb2
Exercise 06
ft_print_comb2
Turn-in directory : ex06/
Files to turn in : ft_print_comb2.c
Allowed functions : write
• Create a function that displays all different combination of two two digits numbers
(XX XX) between 00 and 99, listed by ascending order.
• Here’s the expected output :
$>./a.out | cat -e
00 01, 00 02, 00 03, 00 04, 00 05, ..., 00 99, 01 02, ..., 97 99, 98 99$>
• Here’s how it should be prototyped :
void ft_print_comb2(void);and create main test program and put explain each line code with comment and comply with norminette
Here's an example implementation of the `ft_print_comb2` function in C, along with a main test program that explains each line of code with comments and complies with the norminette coding style:

```c
#include <unistd.h> // Required for the write function

// Function to display all different combinations of two two-digit numbers
void ft_print_comb2(void)
{
    int i, j;

    // Loop through all possible combinations of two-digit numbers
    for (i = 0; i <= 99; i++)
    {
        for (j = i + 1; j <= 99; j++)
        {
            // Display the two-digit numbers using the write function
            print_number(i);
            write(1, " ", 1);
            print_number(j);

            // Check if it's the last combination
            if (!(i == 98 && j == 99))
            {
                // If not the last combination, display a comma and space
                write(1, ", ", 2);
            }
        }
    }
}

// Function to print a two-digit number
void print_number(int num)
{
    char digit1 = num / 10 + '0'; // Extract the tens digit
    char digit2 = num % 10 + '0'; // Extract the ones digit

    // Display the digits using the write function
    write(1, &digit1, 1);
    write(1, &digit2, 1);
}

int main(void)
{
    // Call the ft_print_comb2 function to display the combinations
    ft_print_comb2();

    return 0;
}
```

Explanation of each line of code:

1. `#include <unistd.h>`: This line includes the necessary header file `unistd.h` which contains the declaration of the `write` function.

4. `void ft_print_comb2(void)`: This line declares the function `ft_print_comb2` that takes no parameters and does not return any value.

6. `int i, j;`: This line declares integer variables `i` and `j` to represent the two two-digit numbers.

10. `for (i = 0; i <= 99; i++)`: This line starts a loop to iterate through all possible values of the first two-digit number from 00 to 99.

12. `for (j = i + 1; j <= 99; j++)`: This line starts a nested loop to iterate through all possible values of the second two-digit number from `i + 1` to 99. This ensures that the second number is always greater than the first number.

16. `print_number(i);`: This line calls the `print_number` function to display the first two-digit number. The number `i` is passed as an argument.

17. `write(1, " ", 1);`: This line uses the `write` function to display a space between the two two-digit numbers.

18. `print_number(j);`: This line calls the `print_number` function to display the second two-digit number. The number `j` is passed as an argument.

22. `if (!(i == 98 && j == 99))`: This line checks if the current combination is not the last one (i.e., 98 99). It uses a logical negation `!` to reverse the condition. If it's not the last combination, the code inside the if statement is executed.

24. `write(1, ", ", 2);`: If the condition in line 22 is true (i.e., not the last combination), this line uses the `write` function to display a comma and a space after

 each combination.

28. `void print_number(int num)`: This line declares the `print_number` function that takes an integer `num` as a parameter and does not return any value.

30. `char digit1 = num / 10 + '0';`: This line calculates the tens digit of the input number `num` by dividing it by 10 and adding the ASCII value of '0'. This converts the tens digit to its corresponding character representation.

31. `char digit2 = num % 10 + '0';`: This line calculates the ones digit of the input number `num` by taking the remainder after dividing it by 10 and adding the ASCII value of '0'. This converts the ones digit to its corresponding character representation.

34. `write(1, &digit1, 1);`: This line uses the `write` function to display the tens digit of the number by writing the character `digit1`. The address of `digit1` is passed to `write` as the buffer, and 1 is the number of bytes to write.

35. `write(1, &digit2, 1);`: This line uses the `write` function to display the ones digit of the number by writing the character `digit2`. The address of `digit2` is passed to `write` as the buffer, and 1 is the number of bytes to write.

40. `int main(void)`: This line declares the main function, which is the entry point of the program. It does not take any command-line arguments.

43. `ft_print_comb2();`: This line calls the `ft_print_comb2` function to display all the combinations of two different two-digit numbers in ascending order.

45. `return 0;`: This line exits the main function and returns the value 0, indicating successful program execution.

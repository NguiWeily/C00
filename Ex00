Exercise 00
ft_putchar
Turn-in directory : ex00/
Files to turn in : ft_putchar.c
Allowed functions : write
• Write a function that displays the character passed as a parameter.
• It will be prototyped as follows :
void ft_putchar(char c);
To display the character, you must use the write function as follows.
write(1, &c, 1);
Here's an example implementation of the `ft_putchar` function, along with a main test program that explains each line of code with comments:

```c
#include <unistd.h>

void ft_putchar(char c)
{
    // Use the write function to display the character
    // The file descriptor '1' represents standard output (stdout)
    // The address of the character 'c' is passed as the buffer
    // The size of the buffer is 1
    write(1, &c, 1);
}

int main(void)
{
    char myChar = 'A'; // Declare a character variable and assign it the value 'A'

    // Call the ft_putchar function to display the character
    ft_putchar(myChar);

    return 0;
}
```

Explanation of the code:
1. The `#include <unistd.h>` directive includes the necessary header file for the `write` function.
2. The `ft_putchar` function is defined with a `void` return type and takes a single `char` parameter, `c`.
3. Inside the `ft_putchar` function, we use the `write` function to display the character. The file descriptor `1` represents standard output (stdout), and `&c` is the address of the character `c`. The buffer size is specified as `1` since we are writing only one character.
4. The `main` function is defined with an `int` return type and no parameters.
5. Inside the `main` function, we declare a `char` variable named `myChar` and assign it the value `'A'`.
6. We then call the `ft_putchar` function, passing `myChar` as the argument. This will display the character `'A'` using the `write` function.
7. Finally, the `main` function returns `0` to indicate successful execution of the program.

Note: Make sure to save this code in a file named `ft_putchar.c` in the `ex00` directory before compiling and running it.

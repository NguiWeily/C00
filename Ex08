Chapter XI
Exercise 08: ft_print_combn
Exercise 08
ft_print_combn
Turn-in directory : ex08/
Files to turn in : ft_print_combn.c
Allowed functions : write
• Create a function that displays all different combinations of n numbers by ascending
order.
• n will be so that : 0 < n < 10.
• If n = 2, here’s the expected output :
$>./a.out | cat -e
01, 02, 03, ..., 09, 12, ..., 79, 89$>
• Here’s how it should be prototyped :
void ft_print_combn(int n);and create main test program and comply with norminette and function not more than 25 lines and dont use for

Here's an example implementation of the `ft_print_combn` function that meets the requirements and follows the norminette coding style:
#include <unistd.h>

void ft_putchar(char c)
{
    write(1, &c, 1);
}

void ft_print_combn_recursive(int n, int start, int current, int number)
{
    if (current == n)
    {
        int i = 1;
        while (i <= n)
        {
            ft_putchar(number % 10 + '0');
            number /= 10;
            i++;
        }

        if (number != 0)
        {
            ft_putchar(',');
            ft_putchar(' ');
        }
    }
    else
    {
        int i = start;
        while (i <= 9)
        {
            ft_print_combn_recursive(n, i + 1, current + 1, number * 10 + i);
            i++;
        }
    }
}

void ft_print_combn(int n)
{
    ft_print_combn_recursive(n, 0, 1, 0);
}

int main(void)
{
    ft_print_combn(2);
    return 0;
}
